5)func lastword() {
	argString := os.Args[1]
	var (
		indexTo, indexFrom int
		slice              string
	)
	lenArgString := len(argString) - 1
	for i := lenArgString; i >= 0; i-- {
		if indexTo == 0 && argString[i] != ' ' {
			indexTo = i + 1
		} else if indexTo > 0 && argString[i] == ' ' {
			indexFrom = i + 1
			break
		}
	}
	slice = arg[index2:index1]
	for _, v := range slice {
		z01.PrintRune(v)
	}

	slice = argString[indexFrom:indexTo]
	for _, v := range slice {
		z01.PrintRune(v)
	}
	z01.PrintRune('\n')

}___________________
6)func tabmult() {
    if len(os.Args[1:]) != 1 {
        z01.PrintRune('\n')
        return
    } else {
        a, _ := strconv.Atoi(os.Args[1])
        b := os.Args[1]
        if a < 0 {
            z01.PrintRune('\n')
            return
        }
        for i := 1; i <= 9; i++ {
            res := i * a
            z01.PrintRune(rune(i + 48))
            z01.PrintRune(' ')
            z01.PrintRune('x')
            z01.PrintRune(' ')
            for _, v := range b {
                z01.PrintRune(v)
            }
            z01.PrintRune(' ')
            z01.PrintRune('=')
            z01.PrintRune(' ')
            str := strconv.Itoa(res)
            for _, v := range str {
                z01.PrintRune(v)
            }
            z01.PrintRune('\n')

        }
    }
}
func Atoi(s string) int {
	len := 0
	for range s {
		len++
	}
	plus := 0
	minus := 0
	final := 0
	count := 0
	str := []rune(s)
	for i := 0; i < len; i++ {
		if str[i] >= '0' && str[i] <= '9' {
			count = 0
			for j := '0'; j < str[i]; j++ {
				count++
			}
			final = final*10 + count
		} else if str[i] == '-' && str[i] == 0 {
			minus++
		} else if str[i] == '+' && str[i] == 0 {
			plus++
		} else {
			return 0
		}

	}
	if minus == 1 {
		final = -final
	}
	return final
}
_________________________________
7)func ALPHAMIRROR() {
	input := os.Args[1]
	str := []rune(input)
	for i := range str {
		if !(str[i] >= 'a' && str[i] <= 'z') && !(str[i] >= 'A' && str[i] <= 'Z') {
			continue
		}
		if str[i] >= 'a' && str[i] <= 'm' {
			count := 25
			for j := 'a'; j < str[i]; j++ {
				count -= 2
			}
			str[i] = str[i] + rune(count)
		} else if str[i] >= 'n' && str[i] <= 'z' {
			count := 25
			for j := 'z'; j > str[i]; j-- {
				count -= 2
			}
			str[i] = str[i] - rune(count)
		} else if str[i] >= 'A' && str[i] <= 'M' {
			count := 25
			for j := 'A'; j < str[i]; j++ {
				count -= 2
			}
			str[i] = str[i] + rune(count)
		} else if str[i] >= 'N' && str[i] <= 'Z' {
			count := 25
			for j := 'Z'; j > str[i]; j-- {
				count -= 2
			}
			str[i] = str[i] - rune(count)
		}
	}

	for i := range str {
		z01.PrintRune(str[i])
	} else {
		z01.PrintRune(10)
	}	
}
_________________________________
8)func compare() {
    if len(os.Args[1:]) != 2 {
        z01.PrintRune('\n')
        return
    }
    a := os.Args[1]
    b := os.Args[2]
    c := 0
    if a < b {
        c = -1
    } else if a > b {
        c = 1
    }
    res := strconv.Itoa(c)
    for _, v := range res {
        z01.PrintRune(v)
    }
}
	