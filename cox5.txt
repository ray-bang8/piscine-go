17)func GCD()
    if len(os.Args) == 3 {


    		s1 := os.Args[1]
    		s2 := os.Args[2]
    		fmt.Println(gcd(Atoi(os.Args[1]), Atoi(os.Args[2])))

    	} else {
    		z01.PrintRune('\n')
    	}
    }
    func gcd(a, b int) int {
    	if b == 0 {
    		return a
    	}
    	return gcd(b, a%b)
    }

    18)func HIDEDENP() {
    	if len(os.Args) == 3 {
    		answer := ""
    		s1 := []rune(os.Args[1])
    		s2 := []rune(os.Args[2])
    		j := 0

    		for i := 0; i < len(s1); i++ {
    			for ; j < len(s2); j++ {
    				if s1[i] == s2[j] {
    					answer += string(s1[i])
    					break
    				}
    			}
    		}
    		fmt.Println(answer)
    		if answer == string(s1) {
    			fmt.Println("1")
    		} else {
    			fmt.Println("0")
    		}
    	} else {
    		fmt.Println()
    	}
    }
    19)func ROSTRING() {

    	new := ""
    	new2 := ""
    	if len(os.Args) == 2 {
    		str := os.Args[1]
    		for i := 0; i < len(str); i++ {
    			str = standart(str)
    			if str[0] != 32 {
    				for v := 0; v < len(str); v++ {

    					if str[v] == 32 {
    						new = str[:v]
    						new2 = str[v:]
    						str = new2 + " " + new
    						fmt.Println(standart(str))
    						return
    					}
    				}
    			} 
    		}
    	} else {
    		fmt.Println()
    	}
    }
    func standart(s string) string {
    	return strings.Join(strings.Fields(strings.TrimSpace(s)), " ")
    }
    ____________________________________________
    20)func Split(str, charset string) []string {
		if charset == "" {
			ar := make([]string, len(str))
			i := 0
			for _, v := range str {
				ar[i] = string(v)
				i++
			}
			return ar
		}
	
		nw := 0
		a := 0
		for i := 0; i <= len(str)-len(charset); i++ {
			if str[i:i+len(charset)] == charset {
				a++
				i = i + len(charset)
			}
		}
		ar := make([]string, a+1)
		j := 0
		for i := 0; i <= len(str)-len(charset); i++ {
			if str[i:i+len(charset)] == charset {
				ar[j] = str[nw:i]
				j++
				nw = i + len(charset)
				i = i + len(charset)
			}
		}
		ar[j] = str[nw:]
		return ar
	}